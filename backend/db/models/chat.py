from datetime import datetime
import enum

from sqlalchemy import Column, Integer, String, DateTime, Text, ForeignKey, Enum as SQLEnum
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import JSONB

from db.base import Base
# Import User model for foreign key relationship (adjust path if necessary)
from .user import User

# Define roles for messages
class MessageRole(str, enum.Enum):
    user = "user"
    assistant = "assistant"
    system = "system" # Optional: for system-level messages or instructions

class Conversation(Base):
    __tablename__ = "conversations"

    id = Column(Integer, primary_key=True, index=True)
    session_id = Column(String, index=True, unique=True, nullable=False) # Unique ID for the session (e.g., UUID generated by client/server)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False, index=True) # Link to the user who owns the conversation
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow) # Track last interaction

    # Relationship to messages (loads messages associated with this conversation)
    messages = relationship("ConversationMessage", back_populates="conversation", cascade="all, delete-orphan", order_by="ConversationMessage.created_at")
    # Relationship back to the user
    user = relationship("User") # Removed back_populates if User model doesn't define it

    def __repr__(self):
        return f"<Conversation(id={self.id}, session_id='{self.session_id}', user_id={self.user_id})>"

class ConversationMessage(Base):
    __tablename__ = "conversation_messages"

    id = Column(Integer, primary_key=True, index=True)
    conversation_id = Column(Integer, ForeignKey("conversations.id"), nullable=False, index=True)
    role = Column(SQLEnum(MessageRole), nullable=False) # user, assistant, system
    content = Column(Text, nullable=False)
    metadata_ = Column("metadata", JSONB, nullable=True) # Optional: Store sources for assistant messages, feedback flags, etc.
    created_at = Column(DateTime, default=datetime.utcnow, index=True) # Index for ordering

    # Relationship back to the conversation
    conversation = relationship("Conversation", back_populates="messages")

    def __repr__(self):
        content_snippet = (self.content[:50] + '...') if len(self.content) > 50 else self.content
        return f"<ConversationMessage(id={self.id}, conv_id={self.conversation_id}, role='{self.role}', content='{content_snippet}')>"